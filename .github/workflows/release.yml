name: Release

on:
  workflow_dispatch: # Allow manual workflow dispatch
  push:
    tags: 
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  # Test to make sure that we can even make a release for this tag
  test:
    name: Flutter Test (Ubuntu Latest)
    runs-on: ubuntu-latest
    steps:

        # Checkout and set up flutter
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup flutter
        uses: subosito/flutter-action@v1

      # Run the flutter test
      - name: Run flutter tests
        run: flutter test

  # Make a change log that shows the differences from the last release
  generate-changelog:
    name: Generate Changelogs
    needs: test
    runs-on: ubuntu-latest
    steps:

      # Get the latest release tag
      - name: Get latest release tag
        id: get_latest_release
        uses: pozetroninc/github-action-get-latest-release@v0.5.0
        with:
          repository: ${{ github.repository }}

      # Compare the last release to this and create a changelog
      - name: Generate changelog since last release
        uses: charmixer/auto-changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          future_release: ${{ github.ref }}
          since_tag: ${{ steps.get_latest_release.outputs.release }}

      # Upload the log for use in the next step
      - name: Upload changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: CHANGELOG.md

  # Draft the next release
  draft-release:
    name: Draft Github release
    needs: generate-changelog
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:

    # Get the changelog
    - name: Download changelog
      uses: actions/download-artifact@v2
      with:
        name: changelog

    # Generate the next release using the change log as the body
    - name: Draft release with changelog
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Flutter CI Test ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: true
        prerelease: false

  # Time to build
  create-build:

    # Using a matrix to simplify repetitive code.
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:

        # Building for Android, Windows, Linux, and Web
        target: [Windows , msix]
        - os: windows-2019
          target: Windows
          build_target: windows
          build_path: build\windows\runner\Release
          asset_extension: .zip
          asset_content_type: application/zip
         - os: windows-latest
          target: Windows
          build_target: windows
          build_path: release/
          asset_extension: .msix
          asset_content_type: application/vnd.microsoft.portable-executable
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    needs: draft-release
    steps:
    # Set up flutter
    - name: Set up flutter master channel
      uses: subosito/flutter-action@v1.5.0
      with:
        channel: master


    # Enable Windows support
    - name: Enable Windows support
      if: matrix.target == 'Windows'
      run: flutter config --enable-windows-desktop

    # Check with flutter doctor
    - name: Check that flutter says that it is okay
      run: flutter doctor -v

    # Checkout code, create missing files, and get packages
    - name: Checkout
      uses: actions/checkout@v2
    - run: flutter create .
    - run: flutter pub get

    # Build the application for all targets.
    - run: flutter build -v ${{ matrix.build_target }} --release

    #### Package the builds

    # Copy all needed redistributables to the release directory (Windows)
    - name: Copy VC redistributables to release directory for Windows
      if: matrix.target == 'Windows'
      run: |
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
  
    # Create a archive for the Windows build so people download everything that is needed in one package
    - name: Compress build for Windows
      if: matrix.target == 'Windows'
      run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\flutter_pkg_${{ matrix.target }}.zip
      working-directory: ${{ matrix.build_path }}
    # Upload the build to the draft release.
    - name: Add packaged build to release draft
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.draft-release.outputs.upload_url }}
        asset_path: ./flutter_pkg_${{ matrix.target }}${{ matrix.asset_extension }}
        asset_name: flutter_pkg_${{ matrix.target }}${{ matrix.asset_extension }}
        asset_content_type: ${{ matrix.asset_content_type }}
